package com.example.demo.DataAccess.Services;

import com.example.demo.DataAccess.Entity.DataBuyRule;
import com.example.demo.DataAccess.Entity.DataDiscountRule;
import com.example.demo.DataAccess.Entity.DataStore;
import com.example.demo.DataAccess.Repository.BuyRuleRepository;
import com.example.demo.DataAccess.Repository.DiscountRuleRepository;
import com.example.demo.DataAccess.Repository.StoreRepository;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
public class RuleService {
    private static final Logger logger = Logger.getLogger(RuleService.class);
    private final DiscountRuleRepository discountRuleRepository;
    private final BuyRuleRepository buyRuleRepository;
    private final StoreRepository storeRepository;

    @Autowired
    public RuleService(DiscountRuleRepository discountRuleRepository, BuyRuleRepository buyRuleRepository, StoreRepository storeRepository) {
        this.discountRuleRepository = discountRuleRepository;
        this.buyRuleRepository = buyRuleRepository;
        this.storeRepository = storeRepository;
    }

   // @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    //return int id of buy rule (-1 if error)
    public int insertDiscountRule(DataDiscountRule discountRule,int storeID) {
        try {
            Optional<DataStore> dataStore = storeRepository.findById(storeID);
            if(dataStore.isEmpty()){
                logger.warn(String.format("store %d is not present in db", storeID));
                return -1;
            }
            discountRule.setStore(dataStore.get());
            DataDiscountRule dataDiscountRule = discountRuleRepository.saveAndFlush(discountRule);
            //set the id's that were generated by db and store them to the data object
            discountRule.setDiscountRuleId(dataDiscountRule.getDiscountRuleId());
            logger.info(String.format("inserted discount rule %d successfully to db", discountRule.getDiscountRuleId()));
            return dataDiscountRule.getDiscountRuleId();
        } catch (Exception e) {
            logger.error(String.format("failed to insert discount rule to db, ERROR: %s", e.getMessage()));
            return -1;
        }
    }
    // @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    //return int id of buy rule (-1 if error)
    public int insertBuyRule(DataBuyRule buyRule,int storeID) {
        try {
            Optional<DataStore> dataStore = storeRepository.findById(storeID);
            if(dataStore.isEmpty()){
                logger.warn(String.format("store %d is not present in db", storeID));
                return -1;
            }
            buyRule.setStore(dataStore.get());
            DataBuyRule dataBuyRule = buyRuleRepository.saveAndFlush(buyRule);
            //set the id's that were generated by db and store them to the data object
            buyRule.setBuyRuleId(dataBuyRule.getBuyRuleId());
            logger.info(String.format("inserted buy rule %d successfully to db", dataBuyRule.getBuyRuleId()));
            return dataBuyRule.getBuyRuleId();
        } catch (Exception e) {
            logger.error(String.format("failed to insert buy rule to db, ERROR: %s", e.getMessage()));
            return -1;
        }
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public boolean deleteBuyRule(int buyRuleID){
        try{
            buyRuleRepository.deleteById(buyRuleID);
            logger.info(String.format("deleted buyRule %d successfully from db", buyRuleID));
            return true;
        }catch (Exception e){
            logger.error(String.format("failed to delete buyRule %d from db, ERROR: %s", buyRuleID, e.getMessage()));
            return false;
        }
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public boolean deleteDiscountRule(int discountRuleID){
        try{
            discountRuleRepository.deleteById(discountRuleID);
            logger.info(String.format("deleted discountRule %d successfully from db", discountRuleID));
            return true;
        }catch (Exception e){
            logger.error(String.format("failed to delete discountRule %d from db, ERROR: %s", discountRuleID, e.getMessage()));
            return false;
        }
    }

    //@Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public DataBuyRule getBuyRuleByID(int buyRuleID) {
        try {
            Optional<DataBuyRule> buyRule = buyRuleRepository.findById(buyRuleID);
            if(buyRule.isEmpty()){
                logger.warn(String.format("buyRule %d is not present in db", buyRuleID));
                return null;
            }
            logger.info(String.format("fetched buyRule %d successfully from db", buyRule.get().getBuyRuleId()));
            return buyRule.get();
        } catch (Exception e) {
            logger.error(String.format("failed to fetch buyRule %d from db, ERROR: %s", buyRuleID, e.getMessage()));
            return null;
        }
    }

    //@Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public DataDiscountRule getDiscountRuleByID(int discountRuleID) {
        try {
            Optional<DataDiscountRule> discountRule = discountRuleRepository.findById(discountRuleID);
            if(discountRule.isEmpty()){
                logger.warn(String.format("discountRule %d is not present in db", discountRuleID));
                return null;
            }
            logger.info(String.format("fetched discountRule %d successfully from db", discountRule.get().getDiscountRuleId()));
            return discountRule.get();
        } catch (Exception e) {
            logger.error(String.format("failed to fetch discountRule %d from db, ERROR: %s", discountRuleID, e.getMessage()));
            return null;
        }
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public List<DataBuyRule> getAllBuyRules() {
        try {
            List<DataBuyRule> buyRules = buyRuleRepository.findAll();
            logger.info("fetched all buyRules successfully from db");
            return buyRules;
        } catch (Exception e) {
            logger.error(String.format("failed to fetch all buyRules from db, ERROR: %s", e.getMessage()));
            return null;
        }
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public List<DataDiscountRule> getAllDiscountRules() {
        try {
            List<DataDiscountRule> discountRules = discountRuleRepository.findAll();
            logger.info("fetched all discountRules successfully from db");
            return discountRules;
        } catch (Exception e) {
            logger.error(String.format("failed to fetch all discountRules from db, ERROR: %s", e.getMessage()));
            return null;
        }
    }
}
