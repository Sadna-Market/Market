package com.example.demo.DataAccess.Services;

import com.example.demo.DataAccess.Entity.DataProductStore;
import com.example.demo.DataAccess.Entity.DataStore;
import com.example.demo.DataAccess.Repository.ProductStoreRepository;
import com.example.demo.DataAccess.Repository.StoreRepository;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class ProductStoreService {
    private static final Logger logger = Logger.getLogger(ProductStoreService.class);

    private final ProductStoreRepository productStoreRepository;
    private final StoreRepository storeRepository;
    @Autowired
    public ProductStoreService(ProductStoreRepository productStoreRepository, StoreRepository storeRepository) {
        this.productStoreRepository = productStoreRepository;
        this.storeRepository = storeRepository;
    }

    public boolean insertProductStore(DataProductStore productStore, int storeId) {
        try {
            Optional<DataStore> store = storeRepository.findById(storeId);
            if(store.isEmpty()){
                logger.warn(String.format("store %d is not present in db", storeId));
                return false;
            }
            productStore.setStore(store.get());
            DataProductStore dataProductStore = productStoreRepository.saveAndFlush(productStore);
            //set the id's that were generated by db and store them to the data object
            productStore.setProductStoreId(dataProductStore.getProductStoreId());
            logger.info(String.format("inserted productStore %d successfully to db", dataProductStore.getProductStoreId()));
            return true;
        } catch (Exception e) {
            logger.error(String.format("failed to insert productStore %s into db, ERROR: %s", productStore.getProductType().getProductName(), e.getMessage()));
            return false;
        }
    }
}
