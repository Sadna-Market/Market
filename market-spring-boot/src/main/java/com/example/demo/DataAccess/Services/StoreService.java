package com.example.demo.DataAccess.Services;

import com.example.demo.DataAccess.Entity.DataStore;
import com.example.demo.DataAccess.Repository.StoreRepository;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

@Service
public class StoreService {
    private static final Logger logger = Logger.getLogger(StoreService.class);

    private final StoreRepository storeRepository;

    @Autowired
    public StoreService(StoreRepository storeRepository){
        this.storeRepository = storeRepository;
    }

    /**
     * This insertion creates a Store row in db
     * Note: InventoryID + BuyPolicyID + DiscountPolicyID are generated! the id's are in the store object that called this function.
     * @param store
     * @return true if success, else false
     */
    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public boolean insertStore(DataStore store) {
        try {
            DataStore s = storeRepository.saveAndFlush(store);
            //set the id's that were generated by db and store them to the data object
            store.setStoreId(s.getStoreId());
            store.getInventory().setInventoryId(s.getInventory().getInventoryId());
            store.getBuyPolicy().setBuyPolicyID(s.getBuyPolicy().getBuyPolicyID());
            store.getDiscountPolicy().setDiscountPolicyId(s.getDiscountPolicy().getDiscountPolicyId());
            logger.info(String.format("inserted store %s successfully to db", store.getName()));
            return true;
        } catch (Exception e) {
            logger.error(String.format("failed to insert store %s into db, ERROR: %s", store.getName(), e.getMessage()));
            return false;
        }
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public boolean deleteStore(int storeId){
        try{
            storeRepository.deleteById(storeId);
            logger.info(String.format("deleted store %d successfully from db", storeId));
            return true;
        }catch (Exception e){
            logger.error(String.format("failed to delete store %d from db, ERROR: %s", storeId, e.getMessage()));
            return false;
        }
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public boolean updateStore(DataStore store){
        try{
            Optional<DataStore> dataStore = storeRepository.findById(store.getStoreId());
            if(dataStore.isEmpty()){
                logger.warn(String.format("store %d is not present in db", store.getStoreId()));
                return false;
            }
            dataStore.get().update(store);
            storeRepository.save(dataStore.get());
            logger.info(String.format("updated store %d successfully in db", dataStore.get().getStoreId()));
            return true;
        }catch (Exception e){
            logger.error(String.format("failed to updated store %d in db, ERROR: %s", store.getStoreId(), e.getMessage()));
            return false;
        }
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public DataStore getStoreById(int storeId) {
        try {
            Optional<DataStore> store = storeRepository.findById(storeId);
            if(store.isEmpty()){
                logger.warn(String.format("store %d is not present in db", storeId));
                return null;
            }
            logger.info(String.format("fetched store %d successfully from db", store.get().getStoreId()));
            return store.get();
        } catch (Exception e) {
            logger.error(String.format("failed to fetch store %d from db, ERROR: %s", storeId, e.getMessage()));
            return null;
        }
    }
    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public List<DataStore> getAllStores() {
        try {
            List<DataStore> stores = storeRepository.findAll();
            logger.info("fetched all stores successfully from db");
            return stores;
        } catch (Exception e) {
            logger.error(String.format("failed to fetch all stores from db, ERROR: %s", e.getMessage()));
            return null;
        }
    }
}
