package com.example.demo.DataAccess.Services;

import com.example.demo.DataAccess.Entity.DataNotification;
import com.example.demo.DataAccess.Entity.DataStore;
import com.example.demo.DataAccess.Repository.NotificationRepository;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class NotificationService {

    private static final Logger logger = Logger.getLogger(NotificationService.class);

    private final NotificationRepository notificationRepository;

    @Autowired
    public NotificationService(NotificationRepository notificationRepository) {
        this.notificationRepository = notificationRepository;
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public boolean insertNotification(DataNotification notification) {
        try {
            DataNotification dataNotification = notificationRepository.saveAndFlush(notification);
            notification.setNotificationId(dataNotification.getNotificationId());
            //set the id's that were generated by db and store them to the data object
            logger.info(String.format("inserted notification %d successfully to db", notification.getNotificationId()));
            return true;
        } catch (Exception e) {
            logger.error(String.format("failed to insert notification into db, ERROR: %s", e.getMessage()));
            return false;
        }
    }

    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public boolean insertNotifications(List<DataNotification> notifications) {
        try {
            List<DataNotification> savedNotifications = notificationRepository.saveAllAndFlush(notifications);
            //set the id's that were generated by db and store them to the data object
            for (int i = 0; i < notifications.size(); i++) {
                notifications.get(i).setNotificationId(savedNotifications.get(i).getNotificationId());
            }
            logger.info(String.format("inserted %d/%d notifications successfully to db",
                    savedNotifications.size(), notifications.size()));
            return true;
        } catch (Exception e) {
            logger.error(String.format("failed to insert notifications into db, ERROR: %s", e.getMessage()));
            return false;
        }
    }

    /**
     * once this succeeds it deletes all messages from db
     *
     * @param username
     * @return list of messages for username
     */
    @Transactional(rollbackFor = {Exception.class}, timeout = 10)
    public List<DataNotification> getAllUserNotifications(String username) {
        try {
            List<DataNotification> notifications = notificationRepository.findAllByUsername(username);
            logger.info(String.format("fetched all pending notifications of %s successfully from db", username));
            //clear pending messages from db. Note: if we need to save history just remove this line.
            notificationRepository.deleteAll(notifications);
            logger.info(String.format("deleted all pending notifications of %s from db", username));
            return notifications;
        } catch (Exception e) {
            logger.error(String.format("failed to fetch all pending notifications of %s from db, ERROR: %s", username, e.getMessage()));
            return null;
        }
    }
}
